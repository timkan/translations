--- !ruby/hash:Moped::BSON::Document
avg_user_rating: 4.400878293601004
classification: :game
created_at: 2012-09-19 23:48:02.000000000 Z
domain: :freestyle
down_votes: 45
entry: 在这个项目中，我们将编写一个程序，读取一个文本块，并告诉
  我们每个单词出现了多少次。
feedback_total: 27
is_project: false
language_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TyFOXyFuzxlcRMGV
level: :beginner
locale: en
name: Create a Histogram
num_exercises: 8
num_published_exercises: 8
num_published_sections: 1
num_readiness_feedbacks: 24
num_sections: 1
num_user_ratings: 1594
published: true
published_at: 2012-09-20 19:38:01.000000000 Z
rating: 139.92685399977077
read_feedback_total: 5
readiness: 96.34210526315789
recommended: false
review_status: :approved
roles:
  manager: []
  editor: []
topic_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    T5Ws8pVtgwADABwX
total_user_rating: 7015.0
up_votes: 208
updated_at: 2012-11-26 15:41:48.679000000 Z
user_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TwTxhHBXEgADAGwS
sections:
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 23:48:02.000000000 Z
  default_view: console_and_editor
  entry: 现在，你知道了在Ruby中如何使用迭代程序和更复杂的数据结构，你可以把它们和自动执行复杂任务的单元结合起来。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpZs7VyRwACADhL
    created_at: 2012-09-19 23:48:03.000000000 Z
    default_code: ! 'puts "Text please: "

      text = gets.chomp


      words = text.split(" ")

      frequencies = Hash.new(0)

      words.each { |word| frequencies[word] += 1 }

      frequencies = frequencies.sort_by {|a, b| b }

      frequencies.reverse!

      frequencies.each { |word, frequency| puts word + " " + frequency.to_s }'
    entry: ! "在这个项目中，我们将建立一段程序，获得用户的输入，然后从该输入生成哈希表。哈希表的每个键将是来自
      用户的单词;每个值对应该单词出现的次数。例如，如果我们的程序中获取字符串\"the rain in Spain falls mainly on the plain,\"
      it will return\n\n    the 2\n    falls 1\n    on 1\n    mainly 1\n    in 1\n\   rain 1\n    plain 1\n    Spain 1\n\n 像这样数据的可视化表现被称为**直方图**。"
    expect_error: false
    feedback_stats:
      typo: 2
      total: 4
      instructional_text_issue: 1
      correctness_test_issue: 1
    from_console: false
    hint: ''
    instruction: Hit Run to start building your own histogram!
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: What You'll Be Building
    tabs: []
    test_functions: return true
    updated_at: 2012-11-03 04:46:19.318000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpZ6rVyRwACADoa
    created_at: 2012-09-19 23:48:58.000000000 Z
    default_code: ''
    entry: ! '现在你知道了我们应该怎样开始：我们需要得到用户的输入。'
    expect_error: false
    feedback_stats:
      correctness_test_issue: 1
      total: 1
    from_console: false
    hint: ''
    instruction: 使用'puts`语句提示用户输入。使用`gets.chomp保存此输入，并且赋值给变量'text'。

    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: You Know the Drill
    tabs: []
    test_functions: ! "if code == nil\n  return \"You gotta type something!\"\nend\n\nbegin\n
      \ text\nrescue NameError\n  return \"Did you declare a variable called text?\"\nend\n\nif
      code.scan(\"puts\").length == 0\n  return \"Prompt the user for input using
      a puts statement.\"\nend\n\nif code.scan(\"gets.chomp\").length == 0\n  return
      \"Make sure to use gets.chomp to get input from the user.\"\nend\n\nreturn true"
    updated_at: 2012-10-09 10:57:30.717000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpZ64ydyAACADe8
    created_at: 2012-09-19 23:48:59.000000000 Z
    default_code: ''
    entry: ! '接下来，我们想把用户输入的字符串转变为某种可以迭代的格式。数据结构由一行元素组成，你说呢？这听起来像一个数组！
      通过对'text'调用'.split'方法，我们可以把它转换成一个数组。'
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 2
      positive_feedback: 1
    from_console: false
    hint: ''
    instruction: 声明一个变量`words`，设置它等于`text`的`.split`方法。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Building the Words Array
    tabs: []
    test_functions: ! "begin\n  words\nrescue NameError\n  return \"Did you declare
      a variable called words?\"\nend\n\nunless words == text.split\n  return \"It
      looks like you didn't set words equal to text.split.\"\nend\n\nreturn true"
    updated_at: 2012-10-14 13:03:46.666000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpZ7F6cewACADEV
    created_at: 2012-09-19 23:49:00.000000000 Z
    default_code: ''
    entry: ! "好！下一步我们要做的是，迭代数组，一次一词。如果我们找到一个词，我们把它添加到哈希表，并给它一个值
      1，如果我们又发现同样的词，直接更新这个词的哈希值自增1。\ n \ n当更新哈希值时，为了确保我们不会遇到
      任何问题，我们将要创建一个**默认值**。例如，假设你查询的键值没有在哈希表中，\ n \ n Hash.new（\“空值\”）\ n \ n返回默认值\“空值\”。
      在哈希。"
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 1
    from_console: false
    hint: ! "这里有一个免费赠品。您应该使用\ n\ n Hash.new(0)创建`frequencies`）"
    instruction: 在编辑器中创建一个哈希名为'frequencies'。给它一个默认值`0`。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Creating the Frequencies Hash
    tabs: []
    test_functions: ! "begin\n  frequencies\nrescue NameError\n  return \"Did you
      create a variable called frequencies?\"\nend\n\nunless frequencies.is_a? Hash\n
      \ return \"It looks like frequencies isn't a hash.\"\nend\n\nunless frequencies[\"parsnips\"]
      == 0\n  return \"Did you create your hash with a default value of 0?\"\nend\n\nreturn
      true"
    updated_at: 2012-10-07 17:38:10.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpZ7YXuTAACADTo
    created_at: 2012-09-19 23:49:01.000000000 Z
    default_code: ''
    entry: ! '漂亮！接下来我们要迭代`words`，添加每个单词的哈希值
      到`频率`中，一次一个。'
    expect_error: false
    feedback_stats:
      positive_feedback: 1
      total: 2
      other: 1
    from_console: false
    hint: ! "我们将要迭代`words`，所以我们应该使用模板\ n \ n\ words.each{|word|action}\ n \ n占位符`word`是数组里的每个词，我们可以把它叫做`word`，或者`item`，或者`x`，或者任何名称。
    \ n\ n迭代运行中，我们要的是更新哈希表，使一个键值代替一种词，然后用1逐渐的增加其
      数量值。每个键是`frequencies[word]，然后使用`+ = 1`自增对应的数值。"
    instruction: ! '使用`.each`迭代`words`数组。对于每个新发现的单词，我们给它一个哈希键，并自增数值1。 （这就是为什么我们的默认值是0：当我们第一次发现这个词，它有
      默认值0，我们可递增为1。）
      看提示获得帮助。'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Iterating Over the Array
    tabs: []
    test_functions: ! "if frequencies.empty?\n  return \"看起来你没有给frequency哈希添加任何键 - 值对。\"\nend\n\ntest_hash = Hash.new(0)\nwords.each
      { |word| test_hash[word] += 1 }\n\nunless test_hash == frequencies\n  return
      \"看起来像你没有正确设置frequency哈希。检查提示
      如果你需要帮助！\"\nend\n\nreturn true"
    updated_at: 2012-10-16 21:28:37.131000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpZ7dsdgQACACye
    created_at: 2012-09-19 23:49:01.000000000 Z
    default_code: ''
    entry: ! "太好了！我们有一个哈希word/frequency键-值对。现在
      我们需要找出一种方式按希望的顺序来获得信息。\ n \ n
      坏消息是，这将分两步走。好消息是，由于Ruby的
      内置的方法，它们是两个非常简单的步骤！\ n \ n我们可以使用`.sort_by`方法和某些参数给`frequencies`排序。例如，如果我们
      输入\n\n    h = h.sort_by {|a, b| b }\n\n此哈希`h`会按字母`b`升序排列，或每个键-值对的值。\ n \ n不方便的是，这意味着我们的
      单词出现频率按从小到大排列，要看出现最频繁的单词，要查阅顶上！我们可以解决这个问题，使用哈希内置的方法`.reverse!`反序排列。"
    expect_error: false
    feedback_stats:
      typo: 1
      total: 13
      instructional_text_issue: 6
      correctness_test_issue: 4
      other: 2
    from_console: false
    hint: ''
    instruction: 使用`.sort_by`和`.reverse!`排序我们的哈希单词表，从最
      频繁到最不频繁。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Sorting the Hash
    tabs: []
    test_functions: ! "test_hash = Hash.new(0)\nwords.each { |word| test_hash[word]
      += 1 }\n\ntest_hash = test_hash.sort_by { |a, b| b }\ntest_hash.reverse!\n\nunless
      test_hash == frequencies\n  return \"It looks like you haven't set the frequencies
      hash correctly. Check the first exercise if you need help!\"\nend\n\nreturn
      true"
    updated_at: 2012-11-06 13:15:20.383000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqWUFueswACACtY
    created_at: 2012-09-20 04:06:40.000000000 Z
    default_code: ''
    entry: ! "+ \“\”+ value.to_s差不多了！最后，我们需要迭代数组，
      输出到控制台上的每个键-值对。\ n \ n有一个小窍门：
      键是字符串，值是数字，如果
      我们尝试连接字符串和数字，Ruby不能实现。我们可以解决这个问题，通过对数字调用
      `.to_s`方法（简称\“转字符串\”），像这样：\n\n    puts
      word + \" \" + value.to_s"
    expect_error: false
    feedback_stats:
      positive_feedback: 1
      total: 1
    from_console: false
    hint: ''
    instruction: 使用`.each`迭代`frequencies`，输出每个词和频率到控制台。如上图所示，词和频率中间放一个空格，以提高可读性。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Iterating Over the Hash
    tabs: []
    test_functions: ! "test_hash = Hash.new(0)\nwords.each { |word| test_hash[word]
      += 1 }\n\ntest_hash = test_hash.sort_by { |a, b| b }\ntest_hash.reverse!\ntest_array
      = []\ntest_hash.each { |word, frequency| test_array.push(word + ' ' + frequency.to_s)}\n\nis_there
      = false\ntest_array.each do |item|\n  if prints.include? item\n    is_there
      = true\n  else\n    is_there = false\n  end\nend\n\nunless is_there\n  return
      \"It looks like you aren't printing each key-value pair to the console correctly.
      Make sure to put a space between each key and value!\"\nend\n\nreturn true"
    updated_at: 2012-10-01 21:58:09.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpZ8VCpPgACADJj
    created_at: 2012-09-19 23:49:05.000000000 Z
    default_code: ''
    entry: 工作不错！完整的运行你的程序几次，看看它是如何计算
      字符串中的每个单词出现的数量。
    expect_error: false
    feedback_stats:
      positive_feedback: 1
      total: 3
      instructional_text_issue: 1
      other: 1
    from_console: false
    hint: ''
    instruction: 当您单击“运行”（Run），你就大功告成了！花一点时间来沐浴在霞光中，庆祝成功，然后再进入到下一个编程游戏。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: You Did It!
    tabs: []
    test_functions: return true
    updated_at: 2012-10-11 15:37:57.450000000 Z
    view: console_and_editor
  feedback_total: 27
  index: 0
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: Data Structures, Meet Iteration
  num_forum_answers: 21
  num_forum_questions: 11
  published: true
  read_feedback_total: 4
  updated_at: 2012-11-06 13:15:20.421000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
